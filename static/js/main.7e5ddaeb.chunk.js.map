{"version":3,"sources":["App.tsx","helpers/calculate.ts","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","frequencies","setFrequencies","className","placeholder","value","onChange","e","target","onClick","someText","symbols","toLowerCase","split","pattern","letterFrequencies","forEach","symbol","test","calculateLetterFrequencies","Object","entries","length","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAqDeA,MA9Cf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEyBF,mBAAyB,IAFlD,mBAENG,EAFM,KAEOC,EAFP,KAQb,OACE,qBAAKC,UAAU,oBAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,mCAAf,UACE,oDACA,0BACEA,UAAU,WACVC,YAAY,qBACZC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOH,UAEpC,wBAAQF,UAAU,SAASM,QAAS,WAd1CP,ECVsC,SAACQ,GACzC,IAAMC,EAAUD,EAASE,cAAcC,MAAM,IACvCC,EAAU,QACVC,EAAoC,GAU1C,OATAJ,EAAQK,SAAQ,SAACC,GACXH,EAAQI,KAAKD,KACXF,EAAkBE,GACpBF,EAAkBE,IAAW,EAE7BF,EAAkBE,GAAU,MAI3BF,EDHUI,CAcmDpB,KAA5D,uBAGA,sBAAKI,UAAU,iBAAf,UACE,yCACA,qBAAKA,UAAU,MAAf,SACGiB,OAAOC,QAAQpB,GAAaqB,OAC3BF,OAAOC,QAAQpB,GAAasB,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXnB,EAAW,KAChD,OACE,qBAAKF,UAAU,oBAAf,SACE,sBAAeA,UAAU,OAAzB,UACGqB,EADH,MACWnB,IADDmB,IAD4BA,MAQ5C,6GE/BDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.7e5ddaeb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  LetterFreqType,\n  calculateLetterFrequencies,\n} from \"./helpers/calculate\";\nimport \"./App.css\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [frequencies, setFrequencies] = useState<LetterFreqType>({});\n\n  const handleButtonClcik = (someText: string) => {\n    setFrequencies(calculateLetterFrequencies(someText));\n  };\n\n  return (\n    <div className=\"container wrapper\">\n      <div className=\"row center-xs\">\n        <div className=\"col-xs-12 flex dir-col middle-xs\">\n          <h1>Letter Frequencies</h1>\n          <textarea\n            className=\"textarea\"\n            placeholder=\"Enter text here...\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n          />\n          <button className=\"button\" onClick={() => handleButtonClcik(text)}>\n            CALCULATE\n          </button>\n          <div className=\"output-wrapper\">\n            <h1>Results</h1>\n            <div className=\"row\">\n              {Object.entries(frequencies).length ? (\n                Object.entries(frequencies).map(([key, value]) => {\n                  return (\n                    <div className=\"col-xs-3 col-md-2\" key={key}>\n                      <div key={key} className=\"pair\">\n                        {key} : {value}\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <h1>No text entered or text does not include any alphabetic letter</h1>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export interface LetterFreqType extends Record<string, number> {}\r\n\r\nexport const calculateLetterFrequencies = (someText: string) => {\r\n  const symbols = someText.toLowerCase().split(\"\");\r\n  const pattern = /[a-z]/;\r\n  const letterFrequencies: LetterFreqType = {};\r\n  symbols.forEach((symbol) => {\r\n    if (pattern.test(symbol)) {\r\n      if (letterFrequencies[symbol]) {\r\n        letterFrequencies[symbol] += 1;\r\n      } else {\r\n        letterFrequencies[symbol] = 1;\r\n      }\r\n    }\r\n  });\r\n  return letterFrequencies;\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}